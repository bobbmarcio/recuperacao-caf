#!/usr/bin/env python3
"""
Script unificado para an√°lise incremental CAF
Executa an√°lise tanto para unidade_familiar quanto para unidade_familiar_pessoa
"""

import sys
import subprocess
from datetime import datetime

def run_unified_analysis(limit: int = None):
    """Executa an√°lise completa do sistema CAF"""
    
    print("üéØ AN√ÅLISE INCREMENTAL CAF - SISTEMA COMPLETO")
    print("=" * 80)
    print(f"üïê In√≠cio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if limit:
        print(f"üî¢ LIMITE: {limit} altera√ß√µes por schema")
    
    # Executar an√°lise de unidade familiar
    print("\n" + "="*80)
    print("üìä FASE 1: AN√ÅLISE UNIDADE FAMILIAR")
    print("="*80)
    
    try:
        if limit:
            result1 = subprocess.run([
                'python', 'run_caf_analysis_mapped.py', str(limit)
            ], capture_output=False, text=True)
        else:
            result1 = subprocess.run([
                'python', 'run_caf_analysis_mapped.py'
            ], capture_output=False, text=True)
        
        if result1.returncode == 0:
            print("‚úÖ An√°lise de unidade familiar conclu√≠da com sucesso")
        else:
            print("‚ùå Erro na an√°lise de unidade familiar")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar an√°lise de unidade familiar: {e}")
        return False
    
    # Executar an√°lise de pessoa
    print("\n" + "="*80)
    print("üë• FASE 2: AN√ÅLISE UNIDADE FAMILIAR PESSOA")
    print("="*80)
    
    try:
        if limit:
            result2 = subprocess.run([
                'python', 'run_caf_analysis_pessoa.py', str(limit)
            ], capture_output=False, text=True)
        else:
            result2 = subprocess.run([
                'python', 'run_caf_analysis_pessoa.py'
            ], capture_output=False, text=True)
        
        if result2.returncode == 0:
            print("‚úÖ An√°lise de unidade familiar pessoa conclu√≠da com sucesso")
        else:
            print("‚ùå Erro na an√°lise de unidade familiar pessoa")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar an√°lise de pessoa: {e}")
        return False
    
    # Executar an√°lise de endere√ßos
    print("\n" + "="*80)
    print("üìç FASE 3: AN√ÅLISE ENDERE√áOS")
    print("="*80)
    
    try:
        if limit:
            result3 = subprocess.run([
                'python', 'run_caf_analysis_endereco.py', str(limit)
            ], capture_output=False, text=True)
        else:
            result3 = subprocess.run([
                'python', 'run_caf_analysis_endereco.py'
            ], capture_output=False, text=True)
        
        if result3.returncode == 0:
            print("‚úÖ An√°lise de endere√ßos conclu√≠da com sucesso")
        else:
            print("‚ùå Erro na an√°lise de endere√ßos")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar an√°lise de endere√ßos: {e}")
        return False
    
    # Executar an√°lise de √°rea im√≥vel
    print("\n" + "="*80)
    print("üè† FASE 4: AN√ÅLISE √ÅREA IM√ìVEL")
    print("="*80)
    
    try:
        if limit:
            result4 = subprocess.run([
                'python', 'run_caf_analysis_area_imovel.py', str(limit)
            ], capture_output=False, text=True)
        else:
            result4 = subprocess.run([
                'python', 'run_caf_analysis_area_imovel.py'
            ], capture_output=False, text=True)
        
        if result4.returncode == 0:
            print("‚úÖ An√°lise de √°rea im√≥vel conclu√≠da com sucesso")
        else:
            print("‚ùå Erro na an√°lise de √°rea im√≥vel")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar an√°lise de √°rea im√≥vel: {e}")
        return False
    
    # Executar an√°lise de renda
    print("\n" + "="*80)
    print("üí∞ FASE 5: AN√ÅLISE RENDA")
    print("="*80)
    
    try:
        if limit:
            result5 = subprocess.run([
                'python', 'run_caf_analysis_renda.py', str(limit)
            ], capture_output=False, text=True)
        else:
            result5 = subprocess.run([
                'python', 'run_caf_analysis_renda.py'
            ], capture_output=False, text=True)
        
        if result5.returncode == 0:
            print("‚úÖ An√°lise de renda conclu√≠da com sucesso")
        else:
            print("‚ùå Erro na an√°lise de renda")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar an√°lise de renda: {e}")
        return False
    
    # Relat√≥rio final
    print("\n" + "="*80)
    print("üìã RELAT√ìRIO FINAL")
    print("="*80)
    
    try:
        print("\nüìä RESUMO UNIDADE FAMILIAR:")
        subprocess.run(['python', 'verify_updates.py'], capture_output=False)
        
        print("\nüë• RESUMO UNIDADE FAMILIAR PESSOA:")
        subprocess.run(['python', 'verify_pessoa_updates.py'], capture_output=False)
        
        print("\nüìç RESUMO ENDERE√áOS:")
        subprocess.run(['python', 'verify_endereco_updates.py'], capture_output=False)
        
        print("\nüè† RESUMO √ÅREA IM√ìVEL:")
        subprocess.run(['python', 'verify_area_imovel_updates.py'], capture_output=False)
        
        print("\nüí∞ RESUMO RENDA:")
        subprocess.run(['python', 'verify_renda_updates.py'], capture_output=False)
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao gerar relat√≥rio: {e}")
    
    print(f"\nüéâ AN√ÅLISE COMPLETA CONCLU√çDA!")
    print(f"üïê Fim: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîó Acesse Mongo Express: http://localhost:8080")
    
    return True

def show_help():
    """Mostra ajuda de uso"""
    print("""
üéØ AN√ÅLISE INCREMENTAL CAF - SISTEMA COMPLETO

USAGE:
    python run_caf_analysis_complete.py [limite]

PAR√ÇMETROS:
    limite (opcional): N√∫mero m√°ximo de altera√ß√µes por schema (padr√£o: ilimitado)

EXEMPLOS:
    python run_caf_analysis_complete.py        # An√°lise completa
    python run_caf_analysis_complete.py 10     # M√°ximo 10 altera√ß√µes por schema

FUN√á√ïES:
    - Executa an√°lise incremental para unidade_familiar
    - Executa an√°lise incremental para unidade_familiar_pessoa
    - Executa an√°lise incremental para endere√ßos
    - Executa an√°lise incremental para √°rea im√≥vel
    - Executa an√°lise incremental para renda
    - Gera relat√≥rio unificado
    - Aplica as mesmas regras de neg√≥cio para todas as an√°lises

COLE√á√ïES MONGODB:
    - caf_unidade_familiar: Unidades familiares
    - caf_unidade_familiar_pessoa: Pessoas das unidades familiares
    - caf_endereco: Endere√ßos
    - caf_area_imovel: √Åreas de im√≥veis
    - caf_renda: Rendas das unidades familiares
""")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help', 'help']:
            show_help()
        else:
            try:
                limit = int(sys.argv[1])
                run_unified_analysis(limit)
            except ValueError:
                print("‚ùå Limite deve ser um n√∫mero inteiro")
                print("Use: python run_caf_analysis_complete.py --help")
    else:
        run_unified_analysis()
